snippet computeLinearScale "Description" w
range[0] +
((range[1] - range[0]) / (domain[1] - domain[0])) * (value - domain[0])
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet doshitonce "Do your shit only once, based on a global window flag"
if (! window.shitDoneOnce) {
	window.shitDoneOnce = true;

	${0:shit_to_run_once}
}
endsnippet

snippet add_req "Description" !b
import ${1}Reducer from 'store/api/organization/$1/$1Reducer';
import $1Saga from 'store/api/organization/$1/$1Saga';

injectSaga('$1Saga', $1Saga);
injectReducer('$1', $1Reducer);
endsnippet

snippet imp_req "Description" !b
import { request as ${1}Request } from 'store/api/organization/$1/$1Actions';
endsnippet

snippet prop_req "Description" !b
${1}: PropTypes.object.isRequired,
$1Request: PropTypes.func.isRequired,
endsnippet

#######################################################################
#                               Angular                               #
#######################################################################
snippet ngcontroller
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.controller('${2:Controller}Controller', $2Controller);

	$2Controller.$inject = [];

	function $2Controller(${3:dependencies}) {
		var vm = this;
		vm.title = '$2Controller';

		activate();

		////////////////

		function activate() {
		}
	}
})();
endsnippet

snippet ngdirective
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.directive('${2:directive}', $2);

	$2.$inject = [
	];

	function $2(${3:dependencies}) {
		var directive = {
			bindToController: true,
			controller: ${4:Controller},
			controllerAs: 'ctrl',
			link: link,
			templateUrl: 'URL_TO TEMPLATE.html',
			restrict: 'EA',
			scope: {
			}
		};

		return directive;

		function link(scope, element, attrs) {
		}
	}

	$4.$inject = [
	];

	function $4() {
	}
})();
endsnippet

snippet ngfactory
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.factory('${2:factory}', $2);

	$2.$inject = [
	];

	function $2() {
		var service = {
		};

		return service;

		////////////////

		// funcs and stuff
	}
})();
endsnippet

snippet ngfilter
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.filter('${2:filter}', $2);

	function $2() {
		return $2Filter;

		////////////////
		function $2Filter(${3:params}) {
			return $3;
		};
	}

})();
endsnippet

snippet ngmodule
(function() {
	'use strict';

	angular
		.module('${1:module}', [
			'${2:dependencies}'
		]);
})();
endsnippet

snippet ngservice
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.service('${2:Service}', $2);

	$2.$inject = [];

	function $2(${3:dependencies}) {
		this.${4:func} = $4;

		////////////////

		function $4() {
		}
	}
})();
endsnippet

#######################################################################
#                                 ES6                                 #
#######################################################################
# Arrow function
snippet arr "Arrow function" i
(${1}) => {
	${2}
}
endsnippet

snippet arri "Arrow function" i
(${1}) => ${2}
endsnippet

# Import
snippet im
import ${1:foo} from '${2:bar}';
endsnippet

# Export
snippet exp
export ${1:default} ${2:bar}
endsnippet



snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet debug "Description" !b
/* jshint debug: true */
/*jshint -W087 */
debugger;
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet fun "function (fun)" w
function ${1:fun} (${2}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
  ${2://code}
}
else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet this "wrap this in jQuery" w
\$(this)$0
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
  ${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.log"
console.debug(${1:"${2:value}"});
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

#######################################################################
#                                React                                #
#######################################################################
snippet rrcc "React Redux Class Component" b
import React from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import classes from './${2:$1}.module.css';

class ${1:`!v expand('%:t:r')`} extends React.Component {
	static propTypes = {};

	render() {
		return (
			<div className={styles.base}>
				$2
			</div>
		);
	}
}

function mapStateToProps(state) {
	return {};
}

export default connect(mapStateToProps)($1);
endsnippet

snippet cn "className"
className={$1}
endsnippet

snippet ren "Render"
render() {
	return ${1:(
		${2:<div>${3}</div>}
	);}
}
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

## EXPECT
snippet ex "Jest - expect(value)"
expect($1)$2;
endsnippet

snippet ebe "Jest - expect(value).toBe(value)"
expect($1).toBe($2);
endsnippet

snippet ecall "Jest - expect(mockFn).toHaveBeenCalled()"
expect($1).toHaveBeenCalled();
endsnippet

snippet ecallt "Jest - expect(mockFn).toHaveBeenCalledTimes(number)"
expect($1).toHaveBeenCalledTimes($2);
endsnippet

snippet ecallw "Jest - expect(mockFn).toHaveBeenCalledWith(arg1, arg2, ...)"
expect($1).toHaveBeenCalledWith($2);
endsnippet

snippet ecloseto "Jest - expect(number).toBeCloseTo(number, numDigits)"
expect($1).toBeCloseTo($2, $3);
endsnippet

snippet edef "Jest - expect(value).toBeDefined()"
expect($1).toBeDefined();
endsnippet

snippet efalsy "Jest - expect(value).toBeFalsy()"
expect($1).toBeFalsy();
endsnippet

snippet egreater "Jest - expect(number).toBeGreaterThan(number)"
expect($1).toBeGreaterThan($2);
endsnippet

snippet egreateror "Jest - expect(number).toBeGreaterThanOrEqual(number)"
expect($1).toBeGreaterThanOrEqual($2);
endsnippet

snippet eless "Jest - expect(number).toBeLessThan(number)"
expect($1).toBeLessThan($2);
endsnippet

snippet elessor "Jest - expect(number).toBeLessThanOrEqual(number)"
expect($1).toBeLessThanOrEqual($2);
endsnippet

snippet einst "Jest - expect(obj).toBeInstanceOf(Class)"
expect($1).toBeInstanceOf($2);
endsnippet

snippet enull "Jest - expect(value).toBeNull()"
expect($1).toBeNull();
endsnippet

snippet etruthy "Jest - expect(value).toBeTruthy()"
expect($1).toBeTruthy();
endsnippet

snippet eundef "Jest - expect(value).toBeUndefined()"
expect($1).toBeUndefined();
endsnippet

snippet econ "Jest - expect(list).toContain(value)"
expect($1).toContain($2);
endsnippet

snippet econeq "Jest - expect(list).toContainEqual(value)"
expect($1).toContainEqual($2);
endsnippet

snippet eeq "Jest - expect(value).toEqual(value)"
expect($1).toEqual($2);
endsnippet

snippet eleng "Jest - expect(list).toHaveLength(number)"
expect($1).toHaveLength($2);
endsnippet

snippet emat "Jest - expect(string).toMatch(regexpOrString)"
expect($1).toMatch($2);
endsnippet

snippet ematob "Jest - expect(obj).toMatchObject(obj)"
expect($1).toMatchObject($2);
endsnippet

snippet ematsnap "Jest - expect(value).toMatchSnapshot(optionalString)"
expect($1).toMatchSnapshot($2);
endsnippet

snippet ethrow "Jest - expect(func).toThrow(error)"
expect($1).toThrow($2);
endsnippet

## GLOBALS

snippet jsetup "Jest - Sets up jest test file"
import $1 from './$1';
describe('$1', () => {
	test('$2', () => {
		$3
	});
});
endsnippet

snippet desc "Jest - describe(name, fn)"
describe('$1', () => {
	${VISUAL}$0
});
endsnippet

snippet test "Jest - test(name, fn)"
test('$1', () => {
	$2
});
endsnippet

snippet it "Jest - alias for test()"
it('$1', () => {
	$2
});
endsnippet

snippet aftera "Jest - afterAll(fn)"
afterAll(() => {
	$1
});
endsnippet

snippet aftere "Jest - afterEach(fn)"
afterEach(() => {
	$1
});
endsnippet

snippet beforea "Jest - beforeAll(fn)"
beforeAll(() => {
	$1
});
endsnippet

snippet beforee "Jest - beforeEach(fn)"
beforeEach(() => {
	$1
});
endsnippet

## MOCK

snippet mclear "Jest - .mockClear()"
.mockClear();
endsnippet

snippet mreset "Jest - .mockReset()"
.mockReset();
endsnippet

snippet mimpl "Jest - .mockImplementation(fn)"
.mockImplementation($1);
endsnippet

snippet mimplonce "Jest - .mockImplementationOnce(fn)"
.mockImplementationOnce($1);
endsnippet

snippet mrett "Jest - .mockReturnThis()"
.mockReturnThis();
endsnippet

snippet mretval "Jest - .mockReturnValue(value)"
.mockReturnValue($1);
endsnippet

snippet mretvalo "Jest - .mockReturnValueOnce(value)"
.mockReturnValueOnce($1);
endsnippet

## JEST

snippet jcleartimers "Jest - jest.clearAllTimers()"
jest.clearAllTimers();
endsnippet

snippet jdisableautomock "Jest - jest.disableAutomock()"
jest.disableAutomock();
endsnippet

snippet jenableautomock "Jest - jest.enableAutomock()"
jest.enableAutomock();
endsnippet

snippet jfn "Jest - jest.fn()"
jest.fn($1);
endsnippet

snippet jismock "Jest - jest.isMockFunction(fn)"
jest.isMockFunction($1);
endsnippet

snippet jgenmock "Jest - jest.genMockFromModule(moduleName)"
jest.genMockFromModule($1);
endsnippet

snippet jmock "Jest - jest.mock(moduleName, factory, options)"
jest.mock($1);
endsnippet

snippet jresetallmocks "Jest - jest.resetAllMocks()"
jest.resetAllMocks();
endsnippet

snippet jresetmodules "Jest - jest.resetModules()"
jest.resetModules();
endsnippet

snippet jrunticks "Jest - jest.runAllTicks()"
jest.runAllTicks();
endsnippet

snippet jruntimers "Jest - jest.runAllTimers()"
jest.runAllTimers();
endsnippet

snippet jrunpendtimers "Jest - jest.runOnlyPendingTimers()"
jest.runOnlyPendingTimers();
endsnippet

snippet jsetmock "Jest - jest.setMock(moduleName, moduleExports)"
jest.setMock($1);
endsnippet

snippet junmock "Jest - jest.unmock(moduleName)"
jest.unmock($1);
endsnippet

snippet jfaketimers "Jest - jest.useFakeTimers()"
jest.useFakeTimers($1);
endsnippet

snippet jrealtimers "Jest - jest.useRealTimers()"
jest.useRealTimers($1);
endsnippet

# vim:ft=snippets:
