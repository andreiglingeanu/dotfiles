
###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet doshitonce "Do your shit only once, based on a global window flag"
if (! window.shitDoneOnce) {
	window.shitDoneOnce = true;

	${0:shit_to_run_once}
}
endsnippet

#######################################################################
#                               Angular                               #
#######################################################################
snippet ngcontroller
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.controller('${2:Controller}Controller', $2Controller);

	$2Controller.$inject = [];

	function $2Controller(${3:dependencies}) {
		var vm = this;
		vm.title = '$2Controller';

		activate();

		////////////////

		function activate() {
		}
	}
})();
endsnippet

snippet ngdirective
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.directive('${2:directive}', $2);

	$2.$inject = [
	];

	function $2(${3:dependencies}) {
		var directive = {
			bindToController: true,
			controller: ${4:Controller},
			controllerAs: 'ctrl',
			link: link,
			templateUrl: 'URL_TO TEMPLATE.html',
			restrict: 'EA',
			scope: {
			}
		};

		return directive;

		function link(scope, element, attrs) {
		}
	}

	$4.$inject = [
	];

	function $4() {
	}
})();
endsnippet

snippet ngfactory
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.factory('${2:factory}', $2);

	$2.$inject = [
	];

	function $2() {
		var service = {
		};

		return service;

		////////////////

		// funcs and stuff
	}
})();
endsnippet

snippet ngfilter
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.filter('${2:filter}', $2);

	function $2() {
		return $2Filter;

		////////////////
		function $2Filter(${3:params}) {
			return $3;
		};
	}

})();
endsnippet

snippet ngmodule
(function() {
	'use strict';

	angular
		.module('${1:module}', [
			'${2:dependencies}'
		]);
})();
endsnippet

snippet ngservice
(function() {
	'use strict';

	angular
		.module('${1:module}')
		.service('${2:Service}', $2);

	$2.$inject = [];

	function $2(${3:dependencies}) {
		this.${4:func} = $4;

		////////////////

		function $4() {
		}
	}
})();
endsnippet

#######################################################################
#                                 ES6                                 #
#######################################################################
# Arrow function
snippet arr "Arrow function" i
(${1}) => {
	${2}
}
endsnippet

snippet arri "Arrow function" i
(${1}) => ${2}
endsnippet

# Import
snippet im
import ${1:foo} from '${2:bar}';
endsnippet

# Export
snippet exp
export ${1:default} ${2:bar}
endsnippet



snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet debug "Description" !b
/* jshint debug: true */
/*jshint -W087 */
debugger;
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
};
endsnippet

snippet fun "function (fun)" w
function ${1:fun} (${2}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
  ${2://code}
}
else {
  ${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
  ${VISUAL}$0
}
endsnippet

snippet this "wrap this in jQuery" w
\$(this)$0
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
  ${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.log"
console.debug(${1:"${2:value}"});
endsnippet

snippet cw "console.warn"
console.warn(${1:"${2:value}"});
endsnippet

snippet ce "console.error"
console.error(${1:"${2:value}"});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

# vim:ft=snippets:
