snippet "^#!" "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby
$0
endsnippet

snippet trs "translate selected" w
I18n.translate('$1', default: '${2:${VISUAL:default}}')$0
endsnippet

snippet # "xmpfilter" w
# => $0
endsnippet

snippet b "a block" w
{ |${1:var}| $2 }$0
endsnippet

snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# encoding: UTF-8
$0
endsnippet

snippet If "<command> if <expression>"
${1:command} if ${0:expression}
endsnippet

snippet Unless "<command> unless <expression>"
${1:command} unless ${0:expression}
endsnippet

snippet if "if <condition> ... end"
if ${1:condition}
	${2:# TODO}
end
endsnippet

snippet ife "if <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
else
	${3:# TODO}
end
endsnippet

snippet ifee "if <condition> ... elseif <condition> ... else ... end"
if I${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet unless "unless <condition> ... end"
unless ${1:condition}
	${0:# TODO}
end
endsnippet

snippet unlesse "unless <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet unlesee "unless <condition> ... elseif <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2: ${3:*args}}
	${0:# TODO}
end
endsnippet

snippet defi "def initialize ..."
def initialize${1: ${2:*args}}
	${0:# TODO}
end
endsnippet

snippet defr "def <name> ... rescue ..."
def ${1:function_name}${2: ${3:*args}}
	${4:# TODO}
rescue
	${0:# TODO}
end
endsnippet

snippet For "(<from>..<to>).each { |<i>| <block> }"
(${1:from}..${2:to}).each { |${3:i}| ${4:# TODO} }
endsnippet

snippet for "(<from>..<to>).each do |<i>| <block> end"
(${1:from}..${2:to}).each do |${3:i}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Merge!" ".merge!(<other_hash>) { |<key>,<oldval>,<newval>| <block> }" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) { |${2:key},${3:oldval},${4:newval}| ${5:block} }
endsnippet

snippet "(\S+)\.merge!" ".merge!(<other_hash>) do |<key>,<oldval>,<newval>| <block> end" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) do |${2:key},${3:oldval},${4:newval}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Del(ete)?_?if" ".delete_if { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.delete_if { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.del(ete)?_?if" ".delete_if do |<key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.delete_if do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Keep_?if" ".keep_if { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.keep_if { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.keep_?if" ".keep_if do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.keep_if do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Reject" ".reject { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.reject { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.reject" ".reject do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.reject do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Select" ".select { |<item>| <block>}" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${2:block} }
endsnippet

snippet "(\S+)\.select" ".select do |<item>| <block> end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Sort" ".sort { |<a>,<b>| <block> }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.sort" ".sort do |<a>,<b>| <block> end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_?k(ey)?" ".each_key { |<key>| <block> }" r
`!p snip.rv=match.group(1)`.each_key { |${1:key}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.each_?k(ey)?" ".each_key do |key| <block> end" r
`!p snip.rv=match.group(1)`.each_key do |${1:key}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_?val(ue)?" ".each_value { |<value>| <block> }" r
`!p snip.rv=match.group(1)`.each_value { |${1:value}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.each_?val(ue)?" ".each_value do |<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_value do |${1:value}|
	${0:# TODO}
end
endsnippet

snippet Each "<elements>.each { |<element>| <block> }"
${1:elements}.each { |${2:${1/s$//}}| ${3:# TODO} }
endsnippet

snippet each "<elements>.each do |<element>| <block> end"
${1:elements}.each do |${2:${1/s$//}}|
	${0:# TODO}
end
endsnippet

snippet each_?s(lice)? "<array>.each_slice(n) do |slice| <block> end"
each_slice(${1:2}) do |${2:slice}|
	${0:# TODO}
end
endsnippet

snippet Each_?s(lice)? "<array>.each_slice(n) { |slice| <block> }"
each_slice(${1:2}) { |${2:slice}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.Map" ".map { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.map" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Rev(erse)?_?each" ".reverse_each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.reverse_each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.rev(erse)?_?each" ".reverse_each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.reverse_each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each" ".each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| ${2:# TODO} }
endsnippet

snippet "(\S+)\.each" ".each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_w(ith)?_?i(ndex)?" ".each_with_index { |<element>,<i>| <block> }" r
`!p snip.rv=match.group(1)`.each_with_index { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}| ${3:# TODO} }$0
endsnippet

snippet "(\S+)\.each_?w(ith)?_?i(ndex)?" ".each_with_index do |<element>,<i>| <block> end" r
`!p snip.rv=match.group(1)`.each_with_index do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.Each_?p(air)?"  ".each_pair { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.each_pair { |${1:key},${2:value}| ${3:# TODO} }
endsnippet

snippet "(\S+)\.each_?p(air)?" ".each_pair do |<key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.each_pair do |${1:key},${2:value}|
	${0:# TODO}
end
endsnippet

snippet "(\S+)\.sub" ".sub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.sub(${1:expression}) { ${2:"replace_with"} }
endsnippet

snippet "(\S+)\.gsub" ".gsub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.gsub(${1:expression}) { ${2:"replace_with"} }
endsnippet

snippet "(\S+)\.index" ".index { |item| <block> }" r
`!p snip.rv=match.group(1)`.index { |${1:item}| ${2:block} }
endsnippet

snippet "(\S+)\.Index" ".index do |item| ... end" r
`!p snip.rv=match.group(1)`.index do |${1:item}|
	${0:block}
end
endsnippet

snippet do "do without variable" i
do
	$1
end
endsnippet

snippet dov "do with variable" i
do |${1:var}|
	$2
end
endsnippet

snippet Do "do ... end" i
do
	$0
end
endsnippet

snippet until "until <expression> ... end"
until ${1:expression}
	${0:# TODO}
end
endsnippet

snippet Until "begin ... end until <expression>"
begin
	${0:# TODO}
end until ${1:expression}
endsnippet

snippet while "while <expression> ... end"
while ${1:expression}
	${0:# TODO}
end
endsnippet

snippet While "begin ... end while <expression>"
begin
	${0:# TODO}
end while ${1:expression}
endsnippet

snippet "\b(r|attr)" "attr_reader :<attr_names>" r
attr_reader :${0:attr_names}
endsnippet

snippet "\b(w|attr)" "attr_writer :<attr_names>" r
attr_writer :${0:attr_names}
endsnippet

snippet "\b(rw|attr)" "attr_accessor :<attr_names>" r
attr_accessor :${0:attr_names}
endsnippet

snippet begin "begin ... rescue ... end"
begin
	${1:# TODO}
rescue
	${0:# TODO}
end
endsnippet

snippet begin "begin ... rescue ... else ... ensure ... end"
begin
	${1:# Raise exception}
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${2:# Rescue}
else
	${3:# other exception}
ensure
	${0:# always excute}
end
endsnippet

snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${0:# Rescue}
endsnippet

snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
$0
end
endsnippet

snippet alias "alias :<new_name> :<old_name>"
alias :${1:new_name} :${2:old_name}
endsnippet

snippet class "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize ${2:*args}
		$0
	end
end
endsnippet

snippet module "module"
module ${1:module_name}
	$0
end
endsnippet

snippet ###
=begin
  $0
=end
endsnippet

###################
#  Other snippets #
###################
snippet end "end"
__END__
endsnippet

snippet deft "Define test"
def test_${1:case_name}
	${0}
end
endsnippet

snippet cl "class"
class ${1}
	${0}
end
endsnippet

snippet enum "Enumerable"
include Enumerable

def each(&block)
	${0}
end
endsnippet

snippet Comp "Comp"
include Comparable

def <=>(other)
	$0
end
endsnippet

snippet Forw- "Forw-"
extend Forwardable
endsnippet

snippet defs "defs"
def self.${1:class_method_name}
	$0
end
endsnippet

snippet defmm "def method_missing"
def method_missing(meth, *args, &block)
	$0
end
endsnippet

snippet am "am"
alias_method :${1:new_name}, :${2:old_name}
endsnippet

snippet fex "fex"
File.expand_path(
endsnippet

snippet fx "File.expand_path"
File.expand_path(
endsnippet

snippet ./ "relative path"
File.expand_path('../${1}', __FILE__)${0}
endsnippet

snippet ../ "relative path"
File.expand_path('../../${1}', __FILE__)${0}
endsnippet

snippet fj "fj"
File.join(
endsnippet

snippet . "."
File.dirname(__FILE__)
endsnippet

snippet rt "respond to (Rails)"
respond_to do |format|
  format.html${1}
end${0}
endsnippet

######################
#  testing snippets  #
######################

snippet tc "tc"
require "test/unit"

require "${1:library_file_name}"

class Test${2:$1} < Test::Unit::TestCase
	def test_${3:case_name}
		$0
	end
end
endsnippet

snippet ts "ts"
require "test/unit"

require "tc_${1:test_case_file}"
require "tc_${2:test_case_file}"$0
endsnippet

snippet as "as"
assert ${1:test}
endsnippet

snippet ase "ase"
assert_equal ${1:expected}, ${2:actual}
endsnippet

snippet asne "asne"
assert_not_equal ${1:unexpected}, ${2:actual}
endsnippet

snippet asid "asid"
assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2 ** -20}
endsnippet

snippet asio "asio"
assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}
endsnippet

snippet asko "asko"
assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}
endsnippet

snippet asn "asn"
assert_nil ${1:instance}
endsnippet

snippet asnn "asnn"
assert_not_nil ${1:instance}
endsnippet

snippet asm "asm"
assert_match /${1:expected_pattern}/, ${2:actual_string}
endsnippet

snippet asnm "asnm"
assert_no_match /${1:unexpected_pattern}/, ${2:actual_string}
endsnippet

snippet aso "aso"
assert_operator ${1:left}, :${2:operator}, ${3:right}
endsnippet

snippet asr "asr"
assert_raise ${1:Exception} { ${2} }
endsnippet

snippet asnr "asnr"
assert_nothing_raised ${1:Exception} { ${2} }
endsnippet

snippet asrt "asrt"
assert_respond_to ${1:object}, :${2:method}
endsnippet

snippet ass "assert_same(..)"
assert_same ${1:expected}, ${2:actual}
endsnippet

snippet ass "assert_send(..)"
assert_send [${1:object}, :${2:message}, ${3:args}]
endsnippet

snippet asns "asns"
assert_not_same ${1:unexpected}, ${2:actual}
endsnippet

snippet ast "ast"
assert_throws(:${1:expected}) { ${2} }
endsnippet

snippet asnt "asnt"
assert_nothing_thrown { ${1} }
endsnippet

###############
#  Rake Task  #
###############

snippet tas "tas"
desc "${1:Task description}"
task :${2:task_name => [:dependent, :tasks]} do
	$0
end
endsnippet

##########################
#     Rspec snippets     #
##########################
snippet desc "desc"
describe ${1:class_name} do
	${2}
end
endsnippet

snippet descm "descm"
describe "${1:#method}" do
	${2:pending "Not implemented"}
end
endsnippet

snippet cont "cont"
context "${1:message}" do
	${2}
end
endsnippet

snippet bef "bef"
before :${1:each} do
	${2}
end
endsnippet

snippet aft "aft"
after :${1:each} do
	${2}
end
endsnippet

snippet let "let"
let(:${1:object}) ${2}
endsnippet

snippet let! "let!"
let!(:${1:object}) ${2}
endsnippet

snippet subj "subj"
subject { ${1} }
endsnippet

snippet s. "s."
subject.${1:method}
endsnippet

snippet spec "spec"
specify { subject.${1} }
endsnippet

snippet exp "exp"
expect { ${1:object} }.to ${2}
endsnippet

snippet raise "raise"
expect { ${1:object} }.to raise_error ${2:StandardError}, /${3:message_regex}/
endsnippet

snippet shared "shared"
shared_examples ${1:"shared examples name"}
endsnippet

snippet ibl "ibl"
it_behaves_like ${1:"shared examples name"}
endsnippet

snippet it "it"
it "${1:spec_name}" do
	${2}
end
endsnippet

snippet its "its"
its(:${1:method}) { should ${2} }
endsnippet

snippet is "is"
it { should ${1} }
endsnippet

snippet isn "isn"
it { should_not ${1} }
endsnippet

#ShouldaMatchers#ActionController
snippet isfp "isfp"
it { should filter_param :${1:key} }
endsnippet

snippet isrt "isrt"
it { should redirect_to ${1:url} }
endsnippet

snippet isrtp "isrtp"
it { should render_template ${1} }
endsnippet

snippet isrwl "isrwl"
it { should render_with_layout ${1} }
endsnippet

snippet isrf "isrf"
it { should rescue_from ${1:exception} }
endsnippet

snippet isrw "isrw"
it { should respond_with ${1:status} }
endsnippet

snippet isr "isr"
it { should route(:${1:method}, '${2:path}') }
endsnippet

snippet isss "isss"
it { should set_session :${1:key} }
endsnippet

snippet issf "issf"
it { should set_the_flash('${1}') }
endsnippet

#ShouldaMatchers#ActiveModel
snippet isama "isama"
it { should allow_mass_assignment_of :${1} }
endsnippet

snippet isav "isav"
it { should allow_value(${1}).for :${2} }
endsnippet

snippet isee "isee"
it { should ensure_exclusion_of :${1} }
endsnippet

snippet isei "isei"
it { should ensure_inclusion_of :${1} }
endsnippet

snippet isel "isel"
it { should ensure_length_of :${1} }
endsnippet

snippet isva "isva"
it { should validate_acceptance_of :${1} }
endsnippet

snippet isvc "isvc"
it { should validate_confirmation_of :${1} }
endsnippet

snippet isvn "isvn"
it { should validate_numericality_of :${1} }
endsnippet

snippet isvp "isvp"
it { should validate_presence_of :${1} }
endsnippet

snippet isvu "isvu"
it { should validate_uniqueness_of :${1} }
endsnippet

#ShouldaMatchers#ActiveRecord
snippet isana "isana"
it { should accept_nested_attributes_for :${1} }
endsnippet

snippet isbt "isbt"
it { should belong_to :${1} }
endsnippet

snippet isbtcc "isbtcc"
it { should belong_to(:${1}).counter_cache ${2:true} }
endsnippet

snippet ishbtm "ishbtm"
it { should have_and_belong_to_many :${1} }
endsnippet

snippet isbv "isbv"
it { should be_valid }${1}
endsnippet

snippet ishc "ishc"
it { should have_db_column :${1} }
endsnippet

snippet ishi "ishi"
it { should have_db_index :${1} }
endsnippet

snippet ishm "ishm"
it { should have_many :${1} }
endsnippet

snippet ishmt "ishmt"
it { should have_many(:${1}).through :${2} }
endsnippet

snippet isho "isho"
it { should have_one :${1} }
endsnippet

snippet ishro "ishro"
it { should have_readonly_attribute :${1} }
endsnippet

snippet iss "iss"
it { should serialize :${1} }
endsnippet

snippet isres "isres"
it { should respond_to :${1} }
endsnippet

snippet isresw "isresw"
it { should respond_to(:${1}).with(${2}).arguments }
endsnippet

snippet super_call "super_call"
${1:super_class}.instance_method(:${2:method}).bind(self).call
endsnippet

snippet lam "Ruby lambda" w
lambda { |${1:v}| ${2:code} }${3}
endsnippet

snippet la "Multiline lambda" w
->${1:(${2:var})} do
  $0
end
endsnippet

snippet mod "Basic module" w
module ${1:Module}
  $0
end
endsnippet

snippet pa "params hash" w
params[:${1:id}]$0
endsnippet

snippet heredoc "here document ruby" w
<<-${1:HEREDOC}
$0
$1
endsnippet

# vim: set ts=2 sw=2 expandtab:
